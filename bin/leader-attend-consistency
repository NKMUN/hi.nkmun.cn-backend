#!/usr/bin/env node

const program = require('commander')

program
  .version('0.1.0')
  .option('--db <connStr>',         'Database, default: mongodb://localhost:27017/nkmun', String)
  .parse(process.argv)

let {
    db = 'mongodb://localhost:27017/nkmun'
} = program

const { MongoClient, ISODate } = require('mongodb')

;(async (dbStr) => {
    const db = await MongoClient.connect( dbStr )
    let cursorLog = await db.collection('introspection').aggregate([
        { $match: {
            'payload.leaderAttend': {$exists: true}
        } },
        { $sort: { time: 1 } }
    ])

    const eventual = {}

    while ( true ) {
        let doc = await cursorLog.next()
        if (doc === null)
          break

        const m = /\/schools\/([a-zA-Z0-9]+)\/seat/.exec(doc.url)
        if (!m) continue
        const schoolId = m[1]
        eventual[schoolId] = doc.payload.leaderAttend        
    }

    for (let schoolId of Object.keys(eventual)) {
        const school = await db.collection('school').findOne({
            _id: schoolId,
            'seat.1._leader_r': { $exists: false },
            'seat.1._leader_nr': { $exists: false }
        })

        if (!school) {
            continue
        }
        
        const flag = eventual[schoolId]
        if (flag === true) {
            if (school.seat['1']._leader_r !== 1) {
                console.log(`${school._id}\t${school.school.name}\t${flag}`)
                await db.collection('school').updateOne({ _id: schoolId }, {
                    $set: { 'seat.1._leader_r': 1 },
                    $unset: { 'seat.1._leader_nr': '' }
                })
            }
        } else if (flag === false) {
            if (school.seat['1']._leader_nr !== 1) {
                console.log(`${school._id}\t${school.school.name}\t${flag}`)
            }
        } else {
            console.error('bad flag: ' + flag)
        }
    }

    db.close()
})(db).catch( e => {
    process.stderr.write(e.stack+'\n')
})

